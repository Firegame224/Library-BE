// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "/node_modules/prisma/prisma-client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum status {
  Tersedia
  Dipinjam
}

enum Role {
  admin
  user
}

enum borrowStatus {
  Dipinjam
  Dikembalikan
  Terlambat
}

model Users {
  id       String     @id @default(uuid())
  name     String?    @unique
  email    String     @unique
  password String?
  image    String     @default("https://i.pinimg.com/736x/5e/39/6b/5e396bb1b17681759922dd10f8a9d702.jpg")
  borrow   borrowed[] @relation("User to Borrowed")
  token    String?    @db.Text
  role     Role       @default(user)
}

model Book {
  id          String     @id @default(uuid())
  title       String
  description String?
  cover       String?
  halaman     Int?
  stok        Int
  status      status     @default(Tersedia)
  borrowed    borrowed[] @relation("Book to Borrowed")
  created_at  DateTime   @default(now())
  update_at   DateTime   @updatedAt
}

model borrowed {
  id String @id @default(uuid())

  user    Users  @relation("User to Borrowed", references: [id], fields: [user_Id]) // Relation User
  user_Id String

  book    Book   @relation("Book to Borrowed", references: [id], fields: [book_Id]) // Relation Book
  book_Id String

  status    borrowStatus @default(Dipinjam)
  borrow_At DateTime     @default(now())
  return_At DateTime

  @@unique([user_Id,book_Id])
}
